"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Strings = (function () {
    function Strings() {
    }
    return Strings;
}());
Strings.CannotRemoveSubscriptionFromLiveConnection = "Subscriptions can't be removed from an open connection.";
Strings.ReadAccessInvalidForNonCalendarFolder = "The Permission read access value {0} can't be used with a non-calendar folder.";
Strings.PropertyDefinitionPropertyMustBeSet = "The PropertyDefinition property must be set.";
Strings.ArgumentIsBlankString = "The argument contains only white space characters.";
Strings.InvalidAutodiscoverDomainsCount = "At least one domain name must be requested.";
Strings.MinutesMustBeBetween0And1439 = "minutes must be between 0 and 1439, inclusive.";
Strings.DeleteInvalidForUnsavedUserConfiguration = "This user configuration object can't be deleted because it's never been saved.";
Strings.PeriodNotFound = "Invalid transition. A period with the specified Id couldn't be found: {0}";
Strings.InvalidAutodiscoverSmtpAddress = "A valid SMTP address must be specified.";
Strings.InvalidOAuthToken = "The given token is invalid.";
Strings.MaxScpHopsExceeded = "The number of SCP URL hops exceeded the limit.";
Strings.ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst = "The contact group's Members property must be reloaded before newly-added members can be updated.";
Strings.CurrentPositionNotElementStart = "The current position is not the start of an element.";
Strings.CannotConvertBetweenTimeZones = "Unable to convert {0} from {1} to {2}.";
Strings.FrequencyMustBeBetween1And1440 = "The frequency must be a value between 1 and 1440.";
Strings.CannotSetDelegateFolderPermissionLevelToCustom = "This operation can't be performed because one or more folder permission levels were set to Custom.";
Strings.PartnerTokenIncompatibleWithRequestVersion = "TryGetPartnerAccess only supports {0} or a later version in Microsoft-hosted data center.";
Strings.InvalidAutodiscoverRequest = "Invalid Autodiscover request: '{0}'";
Strings.InvalidAsyncResult = "The IAsyncResult object was not returned from the corresponding asynchronous method of the original ExchangeService object.";
Strings.InvalidMailboxType = "The mailbox type isn't valid.";
Strings.AttachmentCollectionNotLoaded = "The attachment collection must be loaded.";
Strings.ParameterIncompatibleWithRequestVersion = "The parameter {0} is only valid for Exchange Server version {1} or a later version.";
Strings.DayOfWeekIndexMustBeSpecifiedForRecurrencePattern = "The recurrence pattern's DayOfWeekIndex property must be specified.";
Strings.WLIDCredentialsCannotBeUsedWithLegacyAutodiscover = "This type of credentials can't be used with this AutodiscoverService.";
Strings.PropertyCannotBeUpdated = "This property can't be updated.";
Strings.IncompatibleTypeForArray = "Type {0} can't be used as an array of type {1}.";
Strings.PercentCompleteMustBeBetween0And100 = "PercentComplete must be between 0 and 100.";
Strings.AutodiscoverServiceIncompatibleWithRequestVersion = "The Autodiscover service only supports {0} or a later version.";
Strings.InvalidAutodiscoverSmtpAddressesCount = "At least one SMTP address must be requested.";
Strings.ServiceUrlMustBeSet = "The Url property on the ExchangeService object must be set.";
Strings.ItemTypeNotCompatible = "The item type returned by the service ({0}) isn't compatible with the requested item type ({1}).";
Strings.AttachmentItemTypeMismatch = "Can not update this attachment item since the item in the response has a different type.";
Strings.UnsupportedWebProtocol = "Protocol {0} isn't supported for service requests.";
Strings.EnumValueIncompatibleWithRequestVersion = "Enumeration value {0} in enumeration type {1} is only valid for Exchange version {2} or later.";
Strings.UnexpectedElement = "An element node '{0}:{1}' of the type {2} was expected, but node '{3}' of type {4} was found.";
Strings.InvalidOrderBy = "At least one of the property definitions in the OrderBy clause is null.";
Strings.NoAppropriateConstructorForItemClass = "No appropriate constructor could be found for this item class.";
Strings.SearchFilterAtIndexIsInvalid = "The search filter at index {0} is invalid.";
Strings.DeletingThisObjectTypeNotAuthorized = "Deleting this type of object isn't authorized.";
Strings.PropertyCannotBeDeleted = "This property can't be deleted.";
Strings.ValuePropertyMustBeSet = "The Value property must be set.";
Strings.TagValueIsOutOfRange = "The extended property tag value must be in the range of 0 to 65,535.";
Strings.ItemToUpdateCannotBeNullOrNew = "Items[{0}] is either null or does not have an Id.";
Strings.SearchParametersRootFolderIdsEmpty = "SearchParameters must contain at least one folder id.";
Strings.MailboxQueriesParameterIsNotSpecified = "The collection of query and mailboxes parameter is not specified.";
Strings.FolderPermissionHasInvalidUserId = "The UserId in the folder permission at index {0} is invalid. The StandardUser, PrimarySmtpAddress, or SID property must be set.";
Strings.InvalidAutodiscoverDomain = "The domain name must be specified.";
Strings.MailboxesParameterIsNotSpecified = "The array of mailboxes (in legacy DN) is not specified.";
Strings.ParentFolderDoesNotHaveId = "parentFolder doesn't have an Id.";
Strings.DayOfMonthMustBeSpecifiedForRecurrencePattern = "The recurrence pattern's DayOfMonth property must be specified.";
Strings.ClassIncompatibleWithRequestVersion = "Class {0} is only valid for Exchange version {1} or later.";
Strings.CertificateHasNoPrivateKey = "The given certificate does not have the private key. The private key is necessary to sign part of the request message.";
Strings.InvalidOrUnsupportedTimeZoneDefinition = "The time zone definition is invalid or unsupported.";
Strings.HourMustBeBetween0And23 = "Hour must be between 0 and 23.";
Strings.TimeoutMustBeBetween1And1440 = "Timeout must be a value between 1 and 1440.";
Strings.CredentialsRequired = "Credentials are required to make a service request.";
Strings.MustLoadOrAssignPropertyBeforeAccess = "You must load or assign this property before you can read its value.";
Strings.InvalidAutodiscoverServiceResponse = "The Autodiscover service response was invalid.";
Strings.CannotCallConnectDuringLiveConnection = "The connection has already opened.";
Strings.ObjectDoesNotHaveId = "This service object doesn't have an ID.";
Strings.CannotAddSubscriptionToLiveConnection = "Subscriptions can't be added to an open connection.";
Strings.MaxChangesMustBeBetween1And512 = "MaxChangesReturned must be between 1 and 512.";
Strings.AttributeValueCannotBeSerialized = "Values of type '{0}' can't be used for the '{1}' attribute.";
Strings.NumberOfDaysMustBePositive = "NumberOfDays must be zero or greater. Zero indicates no limit.";
Strings.SearchFilterMustBeSet = "The SearchFilter property must be set.";
Strings.EndDateMustBeGreaterThanStartDate = "EndDate must be greater than StartDate.";
Strings.InvalidDateTime = "Invalid date and time: {0}.";
Strings.UpdateItemsDoesNotAllowAttachments = "This operation can't be performed because attachments have been added or deleted for one or more items.";
Strings.TimeoutMustBeGreaterThanZero = "Timeout must be greater than zero.";
Strings.AutodiscoverInvalidSettingForOutlookProvider = "The requested setting, '{0}', isn't supported by this Autodiscover endpoint.";
Strings.InvalidRedirectionResponseReturned = "The service returned an invalid redirection response.";
Strings.ExpectedStartElement = "The start element was expected, but node '{0}' of type {1} was found.";
Strings.DaysOfTheWeekNotSpecified = "The recurrence pattern's property DaysOfTheWeek must contain at least one day of the week.";
Strings.FolderToUpdateCannotBeNullOrNew = "Folders[{0}] is either null or does not have an Id.";
Strings.PartnerTokenRequestRequiresUrl = "TryGetPartnerAccess request requires the Url be set with the partner's autodiscover url first.";
Strings.NumberOfOccurrencesMustBeGreaterThanZero = "NumberOfOccurrences must be greater than 0.";
Strings.StartTimeZoneRequired = "StartTimeZone required when setting the Start, End, IsAllDayEvent, or Recurrence properties.  You must load or assign this property before attempting to update the appointment.";
Strings.PropertyAlreadyExistsInOrderByCollection = "Property {0} already exists in OrderByCollection.";
Strings.ItemAttachmentMustBeNamed = "The name of the item attachment at index {0} must be set.";
Strings.InvalidAutodiscoverSettingsCount = "At least one setting must be requested.";
Strings.LoadingThisObjectTypeNotSupported = "Loading this type of object is not supported.";
Strings.UserIdForDelegateUserNotSpecified = "The UserId in the DelegateUser hasn't been specified.";
Strings.PhoneCallAlreadyDisconnected = "The phone call has already been disconnected.";
Strings.OperationDoesNotSupportAttachments = "This operation isn't supported on attachments.";
Strings.UnsupportedTimeZonePeriodTransitionTarget = "The time zone transition target isn't supported.";
Strings.IEnumerableDoesNotContainThatManyObject = "The IEnumerable doesn't contain that many objects.";
Strings.UpdateItemsDoesNotSupportNewOrUnchangedItems = "This operation can't be performed because one or more items are new or unmodified.";
Strings.ValidationFailed = "Validation failed.";
Strings.InvalidRecurrencePattern = "Invalid recurrence pattern: ({0}).";
Strings.TimeWindowStartTimeMustBeGreaterThanEndTime = "The time window's end time must be greater than its start time.";
Strings.InvalidAttributeValue = "The invalid value '{0}' was specified for the '{1}' attribute.";
Strings.FileAttachmentContentIsNotSet = "The content of the file attachment at index {0} must be set.";
Strings.AutodiscoverDidNotReturnEwsUrl = "The Autodiscover service didn't return an appropriate URL that can be used for the ExchangeService Autodiscover URL.";
Strings.RecurrencePatternMustHaveStartDate = "The recurrence pattern's StartDate property must be specified.";
Strings.OccurrenceIndexMustBeGreaterThanZero = "OccurrenceIndex must be greater than 0.";
Strings.ServiceResponseDoesNotContainXml = "The response received from the service didn't contain valid XML.";
Strings.ItemIsOutOfDate = "The operation can't be performed because the item is out of date. Reload the item and try again.";
Strings.MinuteMustBeBetween0And59 = "Minute must be between 0 and 59.";
Strings.NoSoapOrWsSecurityEndpointAvailable = "No appropriate Autodiscover SOAP or WS-Security endpoint is available.";
Strings.ElementNotFound = "The element '{0}' in namespace '{1}' wasn't found at the current position.";
Strings.IndexIsOutOfRange = "index is out of range.";
Strings.PropertyIsReadOnly = "This property is read-only and can't be set.";
Strings.AttachmentCreationFailed = "At least one attachment couldn't be created.";
Strings.DayOfMonthMustBeBetween1And31 = "DayOfMonth must be between 1 and 31.";
Strings.ServiceRequestFailed = "The request failed. {0}";
Strings.DelegateUserHasInvalidUserId = "The UserId in the DelegateUser is invalid. The StandardUser, PrimarySmtpAddress or SID property must be set.";
Strings.SearchFilterComparisonValueTypeIsNotSupported = "Values of type '{0}' can't be used as comparison values in search filters.";
Strings.ElementValueCannotBeSerialized = "Values of type '{0}' can't be used for the '{1}' element.";
Strings.PropertyValueMustBeSpecifiedForRecurrencePattern = "The recurrence pattern's {0} property must be specified.";
Strings.NonSummaryPropertyCannotBeUsed = "The property {0} can't be used in {1} requests.";
Strings.HoldIdParameterIsNotSpecified = "The hold id parameter is not specified.";
Strings.TransitionGroupNotFound = "Invalid transition. A transition group with the specified ID couldn't be found: {0}";
Strings.ObjectTypeNotSupported = "Objects of type {0} can't be added to the dictionary. The following types are supported: array, byte array, boolean, byte, DateTime, integer, long,, unsigned integer, and unsigned long.";
Strings.InvalidTimeoutValue = "{0} is not a valid timeout value. Valid values range from 1 to 1440.";
Strings.AutodiscoverRedirectBlocked = "Autodiscover blocked a potentially insecure redirection to {0}. To allow Autodiscover to follow the redirection, use the AutodiscoverUrl(string, AutodiscoverRedirectionUrlValidationCallback) overload.";
Strings.PropertySetCannotBeModified = "This PropertySet is read-only and can't be modified.";
Strings.DayOfTheWeekMustBeSpecifiedForRecurrencePattern = "The recurrence pattern's property DayOfTheWeek must be specified.";
Strings.ServiceObjectAlreadyHasId = "This operation can't be performed because this service object already has an ID. To update this service object, use the Update() method instead.";
Strings.MethodIncompatibleWithRequestVersion = "Method {0} is only valid for Exchange Server version {1} or later.";
Strings.OperationNotSupportedForPropertyDefinitionType = "This operation isn't supported for property definition type {0}.";
Strings.InvalidElementStringValue = "The invalid value '{0}' was specified for the '{1}' element.";
Strings.CollectionIsEmpty = "The collection is empty.";
Strings.InvalidFrequencyValue = "{0} is not a valid frequency value. Valid values range from 1 to 1440.";
Strings.UnexpectedEndOfXmlDocument = "The XML document ended unexpectedly.";
Strings.FolderTypeNotCompatible = "The folder type returned by the service ({0}) isn't compatible with the requested folder type ({1}).";
Strings.RequestIncompatibleWithRequestVersion = "The service request {0} is only valid for Exchange version {1} or later.";
Strings.PropertyTypeIncompatibleWhenUpdatingCollection = "Can not update the existing collection item since the item in the response has a different type.";
Strings.ServerVersionNotSupported = "Exchange Server doesn't support the requested version.";
Strings.DurationMustBeSpecifiedWhenScheduled = "Duration must be specified when State is equal to Scheduled.";
Strings.NoError = "No error.";
Strings.CannotUpdateNewUserConfiguration = "This user configuration can't be updated because it's never been saved.";
Strings.ObjectTypeIncompatibleWithRequestVersion = "The object type {0} is only valid for Exchange Server version {1} or later versions.";
Strings.NullStringArrayElementInvalid = "The array contains at least one null element.";
Strings.HttpsIsRequired = "Https is required when partner token is expected.";
Strings.MergedFreeBusyIntervalMustBeSmallerThanTimeWindow = "MergedFreeBusyInterval must be smaller than the specified time window.";
Strings.SecondMustBeBetween0And59 = "Second must be between 0 and 59.";
Strings.AtLeastOneAttachmentCouldNotBeDeleted = "At least one attachment couldn't be deleted.";
Strings.IdAlreadyInList = "The ID is already in the list.";
Strings.BothSearchFilterAndQueryStringCannotBeSpecified = "Both search filter and query can't be specified. One of them must be null.";
Strings.AdditionalPropertyIsNull = "The additional property at index {0} is null.";
Strings.InvalidEmailAddress = "The e-mail address is formed incorrectly.";
Strings.MaximumRedirectionHopsExceeded = "The maximum redirection hop count has been reached.";
Strings.AutodiscoverCouldNotBeLocated = "The Autodiscover service couldn't be located.";
Strings.NoSubscriptionsOnConnection = "You must add at least one subscription to this connection before it can be opened.";
Strings.PermissionLevelInvalidForNonCalendarFolder = "The Permission level value {0} can't be used with a non-calendar folder.";
Strings.InvalidAuthScheme = "The token auth scheme should be bearer.";
Strings.ValuePropertyNotLoaded = "This property was requested, but it wasn't returned by the server.";
Strings.PropertyIncompatibleWithRequestVersion = "The property {0} is valid only for Exchange {1} or later versions.";
Strings.OffsetMustBeGreaterThanZero = "The offset must be greater than 0.";
Strings.CreateItemsDoesNotAllowAttachments = "This operation doesn't support items that have attachments.";
Strings.PropertyDefinitionTypeMismatch = "Property definition type '{0}' and type parameter '{1}' aren't compatible.";
Strings.IntervalMustBeGreaterOrEqualToOne = "The interval must be greater than or equal to 1.";
Strings.CannotSetPermissionLevelToCustom = "The PermissionLevel property can't be set to FolderPermissionLevel.Custom. To define a custom permission, set its individual properties to the values you want.";
Strings.CannotAddRequestHeader = "HTTP header '{0}' isn't permitted. Only HTTP headers with the 'X-' prefix are permitted.";
Strings.ArrayMustHaveAtLeastOneElement = "The Array value must have at least one element.";
Strings.MonthMustBeSpecifiedForRecurrencePattern = "The recurrence pattern's Month property must be specified.";
Strings.ValueOfTypeCannotBeConverted = "The value '{0}' of type {1} can't be converted to a value of type {2}.";
Strings.ValueCannotBeConverted = "The value '{0}' couldn't be converted to type {1}.";
Strings.ServerErrorAndStackTraceDetails = "{0} -- Server Error: {1}: {2} {3}";
Strings.FolderPermissionLevelMustBeSet = "The permission level of the folder permission at index {0} must be set.";
Strings.AutodiscoverError = "The Autodiscover service returned an error.";
Strings.ArrayMustHaveSingleDimension = "The array value must have a single dimension.";
Strings.InvalidPropertyValueNotInRange = "{0} must be between {1} and {2}.";
Strings.RegenerationPatternsOnlyValidForTasks = "Regeneration patterns can only be used with Task items.";
Strings.ItemAttachmentCannotBeUpdated = "Item attachments can't be updated.";
Strings.EqualityComparisonFilterIsInvalid = "Either the OtherPropertyDefinition or the Value properties must be set.";
Strings.AutodiscoverServiceRequestRequiresDomainOrUrl = "This Autodiscover request requires that either the Domain or Url be specified.";
Strings.InvalidUser = "Invalid user: '{0}'";
Strings.AccountIsLocked = "This account is locked. Visit {0} to unlock it.";
Strings.InvalidDomainName = "'{0}' is not a valid domain name.";
Strings.TooFewServiceReponsesReturned = "The service was expected to return {1} responses of type '{0}', but {2} responses were received.";
Strings.CannotSubscribeToStatusEvents = "Status events can't be subscribed to.";
Strings.InvalidSortByPropertyForMailboxSearch = "Specified SortBy property '{0}' is invalid.";
Strings.UnexpectedElementType = "The expected XML node type was {0}, but the actual type is {1}.";
Strings.ValueMustBeGreaterThanZero = "The value must be greater than 0.";
Strings.AttachmentCannotBeUpdated = "Attachments can't be updated.";
Strings.CreateItemsDoesNotHandleExistingItems = "This operation can't be performed because at least one item already has an ID.";
Strings.MultipleContactPhotosInAttachment = "This operation only allows at most 1 file attachment with IsContactPhoto set.";
Strings.InvalidRecurrenceRange = "Invalid recurrence range: ({0}).";
Strings.CannotSetBothImpersonatedAndPrivilegedUser = "Can't set both impersonated user and privileged user in the ExchangeService object.";
Strings.NewMessagesWithAttachmentsCannotBeSentDirectly = "New messages with attachments can't be sent directly. You must first save the message and then send it.";
Strings.CannotCallDisconnectWithNoLiveConnection = "The connection is already closed.";
Strings.IdPropertyMustBeSet = "The Id property must be set.";
Strings.ValuePropertyNotAssigned = "You must assign this property before you can read its value.";
Strings.ZeroLengthArrayInvalid = "The array must contain at least one element.";
Strings.HoldMailboxesParameterIsNotSpecified = "The hold mailboxes parameter is not specified.";
Strings.CannotSaveNotNewUserConfiguration = "Calling Save isn't allowed because this user configuration isn't new. To apply local changes to this user configuration, call Update instead.";
Strings.ServiceObjectDoesNotHaveId = "This operation can't be performed because this service object doesn't have an Id.";
Strings.PropertyCollectionSizeMismatch = "The collection returned by the service has a different size from the current one.";
Strings.XsDurationCouldNotBeParsed = "The specified xsDuration argument couldn't be parsed.";
Strings.UnknownTimeZonePeriodTransitionType = "Unknown time zone transition type: {0}";
Strings.UserPhotoSizeNotSpecified = "The UserPhotoSize must be not be null or empty.";
Strings.JsonSerializationNotImplemented = "JSON Serialization is not implemented for this request.Please retry the request with the XML rendering method.";
Strings.JsonDeserializationNotImplemented = "JSON Deserialization is not implemented for this request.Please retry the request with the XML rendering method.";
exports.Strings = Strings;
